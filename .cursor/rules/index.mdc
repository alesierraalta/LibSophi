---
alwaysApply: true
description: "Master index for all Palabreo Cursor Rules"
---

# Palabreo Cursor Rules Index

## üìã Available Rules

This project uses a comprehensive set of Cursor rules to maintain consistency, quality, and efficiency across the Palabreo literary platform development.

### üèóÔ∏è Core Rules (Always Applied)

1. **[Project Structure](mdc:project-structure.mdc)**
   - Directory organization and architecture patterns
   - File naming conventions and import strategies
   - Critical requirements for headers and design consistency

2. **[User Input Workflow](mdc:user-input-workflow.mdc)**
   - Interactive task loop implementation
   - MCP framework integration requirements
   - Continuous development workflow patterns

### üéØ Context-Specific Rules

3. **[Component Patterns](mdc:component-patterns.mdc)** *(Applied to: *.tsx, *.jsx)*
   - React and Next.js component architecture
   - State management and data fetching patterns
   - Performance optimization and accessibility guidelines

4. **[Design System](mdc:design-system.mdc)** *(Applied to: *.tsx, *.jsx, *.css)*
   - Tailwind CSS configuration and usage patterns
   - Color palette and typography system
   - Responsive design and animation guidelines

5. **[Authentication & Data](mdc:auth-data.mdc)** *(Applied to: auth/**, supabase/**, stores/**)*
   - Supabase and NextAuth.js integration patterns
   - State management with Zustand
   - Real-time features and data security

6. **[Testing & Quality](mdc:testing-quality.mdc)** *(Applied to: *.test.*, *.spec.*, __tests__/**)*
   - Comprehensive testing strategies
   - Code quality standards and linting configuration
   - Database cleanup and rollback procedures

## üéØ Quick Reference

### Critical Requirements
- **Header Pattern**: Always include logo AND "Palabreo" name [[memory:6085061]]
- **Icon Consistency**: Use Lucide React icons, avoid emojis [[memory:6085055]]
- **User Input**: Include user input at end of tasks [[memory:5296768]]
- **MCP Tools**: Use MCP framework in every message
- **Database Testing**: Implement proper cleanup and rollback procedures

### Development Workflow
1. Use MCP framework for enhanced functionality
2. Create TODO lists for complex tasks (3+ steps)
3. Execute tasks immediately upon user input
4. Run `userinput.py` for continuous feedback loop
5. Continue until user explicitly says "stop"
6. Always propose next steps after task completion

### Testing Commands
```powershell
# HTTP endpoint testing
powershell -Command Invoke-WebRequest -Uri "URL" -Method POST

# File operations
powershell -Command Get-Content "filename"
```

### Key Technologies
- **Framework**: Next.js 14 with App Router
- **Styling**: Tailwind CSS with custom design system
- **Database**: Supabase with real-time features
- **Authentication**: NextAuth.js + Supabase
- **State Management**: Zustand stores
- **Testing**: Jest, React Testing Library, Playwright
- **Icons**: Lucide React (consistent usage)

## üîÑ Rule Usage Patterns

### When Rules Apply
- **Always Applied**: Project structure and user input workflow rules
- **File-Based**: Component and design rules apply to relevant file types
- **Directory-Based**: Auth and data rules apply to specific directories
- **Test-Based**: Quality rules apply to test files and testing scenarios

### Rule Interactions
- All rules work together to maintain consistency
- Memory-based requirements override default patterns
- User preferences are preserved across sessions
- Testing rules ensure data integrity in all scenarios

## üöÄ Getting Started

1. **New Components**: Follow [component-patterns.mdc](mdc:component-patterns.mdc)
2. **Styling**: Reference [design-system.mdc](mdc:design-system.mdc)
3. **Data Operations**: Use [auth-data.mdc](mdc:auth-data.mdc) patterns
4. **Testing**: Implement [testing-quality.mdc](mdc:testing-quality.mdc) standards
5. **Interactive Development**: Follow [user-input-workflow.mdc](mdc:user-input-workflow.mdc)

These rules ensure the Palabreo platform maintains high quality, consistency, and user experience while supporting efficient development workflows and robust testing practices.